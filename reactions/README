Welcome to ReACT 

Introduction
------------
ReACT is an extension of the software package Copter and MG-Copter which allows for 
the calculation of redshift and real space large scale structure 
observables for a wide class of gravity and dark energy models. 

Additions to original Copter code http://mwhite.berkeley.edu/Copter/: 

Spherical collapse in modified gravity (1812.05594): 
src/SCOL.cpp

Halo model power and bispectrum for general theories (1812.05594): 
src/HALO.cpp

Real and redshift space LSS 2 point statistics for modified gravity (1606.02520):
src/SPT.cpp

Numerical perturbation theory kernel solvers (1606.02168):
src/SpericalFunctions.cpp

Real space bispectra in modified gravity (1808.01120): 
src/BSPT.cpp

Numerical perturbation theory kernel solver up to 4th order for 1-loop bispectrum (1808.01120):
src/BSPTN.cpp

Note there are additional libraries which you can add in in the src/extra_libraries folder:

Clustering dark energy (example: 1611.00542):
CDE.cpp

Gaussian streaming model for modified gravity (1705.09181):
CorrelationFunction.cpp

Heiarchichal moments in modified gravity (1703.03395):
HigherStat.cpp

CMB lensing statistics (1812.10635):
CMBc.cpp

Regularised perturbation theory (1408.4232):
RegPT.cpp

Effective field theory of LSS with resummation (1802.01566):
EFT.cpp

Works in progress (not tested):
Interpolator in modified gravity theory param space:
PMG_Interpolation.cpp 

Note that the SpecialFunctions.cpp and SPT.cpp libraries in the extra_libraries folder
Contain some additional functions which are necessary for some of the extra libraries. 


Requirements
------------
ReACT is written in C++, so you'll need a relatively modern C++ compiler 

To build the optional Python bindings, you'll need
  1) a recent version of SWIG (usually located at /usr/bin/swig).
  2) Python development headers (usually found in /usr/include/pythonM.N),
  3) Numpy development headers (usually found in /usr/include/numpy)
The configure script (described below) should find the relevant files
automagically.


The ReACT extension makes use of a number of gsl packages such as odeiv2 package which is part of the gsl library.  You will need to have a version 
of gsl installed (gsl 2. or later). This is needed for the numerical calculation of the perturbation theory kernels.

To do this download gsl from http://www.gnu.org/software/gsl/ and install it on your computer.

For Spherical Collapse module (SCOL.cpp) you will also need the sundials package : https://computation.llnl.gov/projects/sundials 



Installation of ReACT then proceeds as follows.

________________________________________________

1.Building
_____________


ReACT should compile on any standard Unix-like system (including Linux and OS
X).  It makes use of GNU Autotools, which is the standard build system for most
open source software today. 

To build and make you first should edit the build.sh file with the installation directory of sundials specified. Then just run

./build.sh

in the home directory of ReACT. 

If you want to make edits to any of the source files, you will not need to reconfigure, so comment out the ./configure command in build.sh and rerun ./build.sh . This will remake the libraries with the edits implemented. 


2.Choosing a model of gravity or dark energy
______________________________


To choose a model of gravity or dark energy
within the framework described in arXiv:1606.02520 for example, open 
the SpecialFunction.cpp file in the src directory. Towards the top of the file you will 
find the background Hubble and mu, gamma2, gamma3 functions as well as the modified spherical collapse function F.
As examples, the Hu Sawicki, nDGP and GR versions of these functions have been included. Simply edit in 
your version of these functions and edit out the unwanted ones. Then just re run ./build.sh in the home directory with the 
'./configure' command edited out.


Adding in models:

One can add in new models. As a default, a maximum of 3 theory parameters have been allowed for. 
There are instructions within the SpecialFunction.cpp file to include more than 
3 theory parameters. The entire file is heavily commented so that 
making any additional edits shouldn't be difficult (haha!). Note there may be some issues with dependencies when adding in new parameters, I haven't tested this. 



3. Running ReACT
_______________________


You can go to the examples directory to see how the basic code works. 

We can compile these examples with a command similar to : 

gcc -I/Users/bbose/Desktop/beta_test/reactions/include -L/Users/bbose/Desktop/beta_test/reactions/lib -lcopter -lgsl -lstdc++ bs.cpp -o test

Then just run 

./test 

The cosmo_react_test.cpp tests the dynamical library for the reactions generated by build.sh. We should link to this library when compiling this. 

gcc -I/Users/bbose/Desktop/beta_test/reactions/include -lgsl -lstdc++ -lsundials_cvode -lsundials_nvecserial -L/Users/bbose/Desktop/beta_test/reactions/lib -lreact -W cosmo_react_test.cpp -o test

Then run ./test. 


Note: src/cosmo_react.cpp is currently configured to take as input the exponent of fr0. You should change line 112 for it to accept another parametrisation of the modified gravity parameter. 

4. Running ReACT in COSMOSIS 
_______________________


To run ReACT within COSMOSIS, we have included some example pipelines in tests/test_pyreact. These make use of the pyreact/react.py and pyreact/cosmosis_multiply_reaction_module.py .  





