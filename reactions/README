Welcome to ReACT 

Introduction
------------
ReACT is an extension of the software package Copter and MG-Copter which allows for 
the calculation of redshift and real space large scale structure 
observables for a wide class of gravity and dark energy models. 

Additions to original Copter code http://mwhite.berkeley.edu/Copter/: 

Spherical collapse in modified gravity (1812.05594): 
src/SCOL.cpp

Halo model power and bispectrum for general theories (1812.05594): 
src/HALO.cpp

Real and redshift space LSS 2 point statistics for modified gravity and dark energy (1606.02520):
src/SPT.cpp

Numerical perturbation theory kernel solvers (1606.02168):
src/SpericalFunctions.cpp

Real space bispectra in modified gravity (1808.01120): 
src/BSPT.cpp

Numerical perturbation theory kernel solver up to 4th order for 1-loop bispectrum (1808.01120):
src/BSPTN.cpp


Requirements
------------

----> C++ Compiler:

ReACT is written in C++, so you'll need a relatively modern C++ compiler 

----> GSL:

The ReACT extension makes use of a number of gsl packages such as odeiv2 package which is part of the gsl library.  You will need to have a version of gsl installed (gsl 2. or later). This is needed for the numerical calculation of the perturbation theory kernels.

To do this download gsl from http://www.gnu.org/software/gsl/ and install it on your computer.


----> Sundials:

For Spherical Collapse module (SCOL.cpp) you will also need the sundials package version 4.0 or later : https://computation.llnl.gov/projects/sundials. We recommend installing via brew:

brew install sundials

Installation of ReACT then proceeds as follows.

________________________________________________

1.Building
_____________


ReACT should compile on any standard Unix-like system (including Linux and OS
X). It makes use of GNU Autotools, which is the standard build system for most
open source software today. 

To build and make you first should edit the build.sh file with the installation directory of sundials specified. Further, you can also specify the default directory of standard libraries if they are not located in the standard path /usr/local/bin. I have included commands for when and when they are not directly specified. Further, for MacOS one does not need the LD_LIBRARY_PATH commands, they are used for Linux systems. Once edited, run

./build.sh

in the home directory of ReACT. 

If you want to make edits to any of the source files, you will not need to reconfigure, so comment out the ./configure command in build.sh and rerun ./build.sh . This will remake the libraries with the edits implemented. 


Note: for macOS (Mojave): add -Wl,-rpath,$SUNDIR/lib to LDFLAGS in the './configure' command and at dynamic library building, as well as for when compiling the test examples in examples folder. 
 
Note: for normal sundials library path, change lib64 to lib in the build.sh file. 

Note: If sundials is not installed with homebrew, then one must append the sundials library path to DY_LIBRARY_PATH in macOS.  


2.Choosing a model of gravity or dark energy
______________________________


To choose a model of gravity or dark energy within the framework described in arXiv:1606.02520 for example, open 
the SpecialFunction.cpp file in the src directory. Towards the top of the file you will 
find the background Hubble and mu, gamma2, gamma3 functions as well as the modified spherical collapse function F.
As examples, the Hu Sawicki, nDGP and GR versions of these functions have been included. Simply edit in 
your version of these functions and edit out the unwanted ones. Then just re run ./build.sh in the home directory with the 
'./configure' command edited out.


Adding in models:

One can add in new models. As a default, a maximum of 3 theory parameters have been allowed for. 
There are instructions within the SpecialFunction.cpp file to include more than 
3 theory parameters. The entire file is heavily commented so that 
making any additional edits shouldn't be (too) difficult. Note there may be some issues with dependencies when adding in new parameters, I haven't tested this. 



3. Running ReACT
_______________________


You can go to the examples directory to see how the basic code works. 

Standalone ReACT with specified cosmology and transfer function: 
________________________________________________________________


The bs.cpp, spt.cpp, halo_ps.cpp examples compute various quantities for a specified cosmology and transfer function. Some example cosmologies are found in examples/transfers. One can produce their own cosmology by getting the transfer function from CAMB say, normalising it to 1 at small k, and also constructing a cosmology .ini file as in the examples. 

We can compile these examples with a command similar to : 

gcc -I/Users/bbose/Desktop/beta_test/reactions/include -L/Users/bbose/Desktop/beta_test/reactions/lib -lcopter -lgsl -lstdc++ bs.cpp -o test

Then just run 

./test 



Python:
______


Alternatively, one can also run ReACT with CAMB in Python using the examples/pyreact_demo.ipynb  notebook. 



Dynamical library:
__________________


Finally, the cosmo_react_test.cpp tests the dynamical library for the reactions generated by build.sh. We should link to this library when compiling this. 


gcc -I/Users/bbose/Desktop/beta_test/reactions/include -lgsl -lstdc++ -lsundials_cvode -lsundials_nvecserial -L/Users/bbose/Desktop/beta_test/reactions/lib -lreact -W cosmo_react_test.cpp -o test

For MacOS one should also specify the path to the dynamic library after compiling with 

export DYLD_LIBRARY_PATH="Users/bbose/ReACT/reactions/lib"

Changing the path to the appropriate one. 

Then run ./test. 



Running ReACT in COSMOSIS 
_______________________


To run ReACT within COSMOSIS, we have included some example pipelines in tests/test_pyreact. These make use of the pyreact/react.py and pyreact/cosmosis_multiply_reaction_module.py .  

As an example, the tests/test_pyreact/pipeline_lsst.ini pipeline is set to run a test likelihood using ReACT+HMCode on the lsst_simulation_fiducial_3000.fits mock data. The .fits file should be moved to the cosmosis directory before running this pipeline. Then one can run the pipeline using a command from the cosmosis home directory similar to 

cosmosis ../ReAct/reactions/tests/test_pyreact/pipeline_lsst.ini 

A SLURM job script running this pipeline has also been provided. One can also use this pipeline and job script to run an MCMC analysis on this data by commenting in the emcee sampler in pipeline_lsst.ini for example (and commenting out 'test'). The job script can also be adapted for an MCMC analysis by commenting in the correct execute command as well as appropriately adapting the time required and ntasks commands.


Note: the mock data provided lsst_simulation_fiducial_3000.fits is the LCDM mock data described in the original ReACT paper <insert arxiv>. 

Note: if using the halofit module in COSMOSIS, one could run into errors if Camb's kmin is set outside 0.0001>kmin>0.00001 (strictly not equal).


4. Additional libraries (for the brave) --- also please contact me at benjamin.bose@unige.ch for any questions regarding these. 
_______________________


There are additional libraries which you can (try to) add in in the src/extra_libraries folder:

Clustering dark energy (example: 1611.00542):
CDE.cpp

Gaussian streaming model for modified gravity (1705.09181):
CorrelationFunction.cpp

Heiarchichal moments in modified gravity (1703.03395):
HigherStat.cpp

CMB lensing statistics (1812.10635):
CMBc.cpp

Regularised perturbation theory (1408.4232):
RegPT.cpp

Effective field theory of LSS with resummation (1802.01566):
EFT.cpp

Works in progress (not tested):
Interpolator in modified gravity theory param space:
PMG_Interpolation.cpp 

Note that the SpecialFunctions.cpp and SPT.cpp libraries in the extra_libraries folder
Contain some additional functions which are necessary for some of the extra libraries. 


